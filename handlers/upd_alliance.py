from math import ceil

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.state import StatesGroup, State, default_state
import asyncpg
from database import upd_info, get_info

class UpdInfoAlliance(StatesGroup):
    upd_alliances_list = State()
    upd_alliances_menu = State()
    rename_alliance = State()


router = Router()

def build_alliance_keyboard(alliances: list[dict], page: int = 1, per_page: int = 5) -> InlineKeyboardMarkup:
    """
    –°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∞–ª—å—è–Ω—Å–æ–≤. –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∏–º—ã—Ö –∞–ª—å—è–Ω—Å–æ–≤ >5,
    —Ç–æ –≤—ã–≤–æ–¥ —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 5 –∞–ª—å—è–Ω—Å–æ–≤ –Ω–∞ –∫–∞–∂–¥—ã–π
    :param alliances: –∞–ª—å—è–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param page: –≤—ã–≤–æ–¥–∏–º–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    :param per_page: –∫–æ–ª-–≤–æ –≤—ã–≤–æ–¥–∏–º—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    :return: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∞–ª—å—è–Ω—Å–∞–º–∏
    """
    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∏–º—ã—Ö –∫–æ–ª-–≤–∞ –∞–ª—å—è–Ω—Å—ã
    total = len(alliances)
    total_pages = ceil(total / per_page)
    page = max(1, min(page, total_pages))

    start = (page - 1) * per_page
    end = start + per_page
    current_slice = alliances[start:end]

    keyboard: list[list[InlineKeyboardButton]] = []

    # –ö–Ω–æ–ø–∫–∏ –∞–ª—å—è–Ω—Å–æ–≤
    for alliance in current_slice:
        keyboard.append([
            InlineKeyboardButton(
                text=alliance["name"],
                callback_data=f"upd_alliance_{alliance['id']}"
            )
        ])

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 1:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"page_{page - 1}"
            )
        )
    if page < total_pages:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚ñ∂Ô∏è –î–∞–ª–µ–µ",
                callback_data=f"page_{page + 1}"
            )
        )

    if nav_buttons:
        keyboard.append(nav_buttons)

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@router.message(Command("upd_alliance"))
async def upd_alliance(msg: Message, state: FSMContext, pool: asyncpg.pool, **kwargs) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–ª—å—è–Ω—Å–∞
    :param msg: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param state: —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    :param pool: –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–¥
    :param kwargs: –¥–æ–ø. –¥–∞–Ω–Ω—ã–µ
    :return: None
    """
    await state.set_state(UpdInfoAlliance.upd_alliances_list)
    await state.update_data(user_id=msg.from_user.id)
    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª—å—è–Ω—Å–æ–≤ —É —é–∑–µ—Ä–∞
    alliances = await get_info.get_alliances_by_master(pool, msg.from_user.id)
    if not alliances:
        await msg.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–ª—å—è–Ω—Å–æ–≤.")
        return

    keyboard = build_alliance_keyboard(alliances)
    # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∞–ª—å—è–Ω—Å–∞–º–∏
    text = f"–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª—å—è–Ω—Å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
    await msg.answer(text=text,
                     reply_markup=keyboard)

@router.callback_query(F.data.startswith("page_"),
                       UpdInfoAlliance.upd_alliances_list)
async def paginate_alliances(call: CallbackQuery, state: FSMContext, pool: asyncpg.pool) -> None:
    """
    –ü–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü
    :param call: –∫–Ω–æ–ø–∫–∞
    :param state: —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    :param pool: –ø—É–ª –ø–æ–¥–∫–ª–ª—é—á–µ–Ω–∏—è
    :return: None
    """
    data = await state.get_data()
    user_id = data.get("user_id")
    if call.from_user.id == user_id:
        # –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        page = int(call.data.removeprefix("page_"))
        alliances = await get_info.get_alliances_by_master(pool, user_id)

        keyboard = build_alliance_keyboard(alliances, page=page)

        await call.message.edit_reply_markup(reply_markup=keyboard)
    await call.answer()

def build_alliance_action_keyboard(alliance_id: int, has_chat: bool) -> InlineKeyboardMarkup:
    """
    –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–ª—å—è–Ω—Å–∞
    :param alliance_id: –∏–¥ –∞–ª—å—è–Ω—Å–∞
    :param has_chat: –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —á–∞—Ç
    :return: –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    """
    keyboard = [
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_name_{alliance_id}")],
        [InlineKeyboardButton(text="üõ† –°–æ—Å—Ç–∞–≤ –∞–ª—å—è–Ω—Å–∞", callback_data=f"edit_members_{alliance_id}")],
        [InlineKeyboardButton(text="üîÅ –ü–µ—Ä–µ–¥–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞", callback_data=f"transfer_master_{alliance_id}")],
        [InlineKeyboardButton(
            text="üö™ –û—Ç–≤—è–∑–∞—Ç—å —á–∞—Ç" if has_chat else "üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å —á–∞—Ç",
            callback_data=f"{'unlink' if has_chat else 'link'}_chat_{alliance_id}"
        )],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∞–ª—å—è–Ω—Å", callback_data=f"delete_alliance_{alliance_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_alliances")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@router.callback_query(F.data.startswith("upd_alliance_"),
                       UpdInfoAlliance.upd_alliances_list)
async def show_alliance_actions(call: CallbackQuery, state: FSMContext, pool: asyncpg.Pool) -> None:
    """
    –í—ã–≤–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–ª—å—è–Ω—Å–∞
    :param call: –∫–Ω–æ–ø–∫–∞
    :param state: —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    :param pool: –ø—É–ª –∫ –±–¥
    :return: None
    """
    data = await state.get_data()
    alliance_id = int(call.data.split("_")[-1])
    user_id = call.from_user.id
    if user_id == data.get("user_id"):
        is_master = await get_info.is_master_of_alliance(pool, alliance_id, user_id)
        if is_master:
            alliance = await get_info.get_alliance_info(pool, alliance_id)
            if not alliance:
                return

            keyboard = build_alliance_action_keyboard(alliance_id, has_chat=bool(alliance["chat_id"]))
            await call.message.edit_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∞–ª—å—è–Ω—Å–∞ ¬´{alliance['name']}¬ª:",
                reply_markup=keyboard
            )
            await state.set_state(UpdInfoAlliance.upd_alliances_menu)

    await call.answer()

@router.callback_query(F.data == "back_to_alliances",
                       UpdInfoAlliance.upd_alliances_menu)
async def back_to_alliances(call: CallbackQuery, state: FSMContext, pool: asyncpg.Pool):
    data = await state.get_data()
    user_id = data.get("user_id", call.from_user.id)
    if call.from_user.id == user_id:
        alliances = await get_info.get_alliances_by_master(pool, user_id)
        keyboard = build_alliance_keyboard(alliances, page=0)
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª—å—è–Ω—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
        await state.set_state(UpdInfoAlliance.upd_alliances_list)
    await call.answer()

@router.callback_query(F.data.startswith(("edit_name_", "edit_members_", "transfer_master_", "unlink_chat_", "link_chat_", "delete_alliance_")),
                       UpdInfoAlliance.upd_alliances_menu)
async def placeholder_handler(call: CallbackQuery):
    await call.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
